// EEM16 - Logic Design
// Design Assignment #2 - Problem #2.1
// dassign2_1.v
// Verilog template

// You may define any additional modules as necessary
// Do not delete or modify any of the modules provided
//
// The modules you will have to design are at the end of the file
// Do not change the module or port names of these stubs

// ***************
// Building blocks
// ***************

// D-register (flipflop).  Width set via parameter.
// Includes propagation delay t_PD = 3
module dreg(clk, d, q);
    parameter width = 1;
    input clk;
    input [width-1:0] d;
    output [width-1:0] q;
    reg [width-1:0] q;

    always @(posedge clk) begin
        q <= #3 d;
    end
endmodule

// 2-1 Mux.  Width set via parameter.
// Includes propagation delay t_PD = 3
module mux2(a, b, sel, y); // 0 1
    parameter width = 1;
    input [width-1:0] a, b;
    input sel;
    output [width-1:0] y;

    assign #3 y = sel ? b : a;
endmodule

// Left-shifter
// No propagation delay, it's just wires really
module shl(a, y);
    parameter width = 1;
    input [width-1:0] a;
    output [width-1:0] y;

    assign y = {a[width-2:0], 1'b0};
endmodule

// Right-shifter
// more wires 
module shr(a, y);
    parameter width = 1;
    input [width-1:0] a;
    output [width-1:0] y;

    assign y = {1'b0, a[width-1:1]};
endmodule

// 16-bit adder (declarative Verilog)
// Includes propagation delay t_PD = 3n = 48
module adder16(a, b, sum);
    input [15:0] a, b;
    output [15:0] sum;

    assign #48 sum = a+b;
endmodule

// ****************
// Blocks to design
// ****************

// Lowest order partial product of two inputs 
// Use declarative verilog only
// IMPORTANT: Do not change module or port names
module partial_product (a, b, pp);
  input [7:0] a, b;
  output [7:0] pp;
  
  if (b[0] == 1)
  	assign #1 pp = a;
  else
    assign #1 pp = 0;
endmodule

`define ZERO8 8b'00000000
`define ONE 1b'1
`define ZERO 1b'0
// Determine if multiplication is complete
// Use declarative verilog only
// IMPORTANT: Do not change module or port names
module is_done (a, b, done);
  input [7:0] a, b;
  output done;
  reg b, done;
  always @(*) begin
    if (b == ZERO8)
      assign #4 done = ONE;
    else
      assign #4 done = ZERO;
  end
endmodule

module clogic (a, b, ao, bo);
  input [7:0] a, b;
  input reset;
  output [7:0] ao, bo;
  wire [7:0] ad, bd;
  
  dreg d1(clk, a, ad);
  dreg d2(clk, b, bd);
  
  shl s1(ad, ao);
  shr s2(bd, bo);
endmodule

// 8 bit unsigned multiply 
// Use structural verilog only
// IMPORTANT: Do not change module or port names
module multiply (clk, ain, bin, reset, prod, ready);
    input clk;
    input [7:0] ain, bin;
    input reset;
  output [15:0] prod, sum, partial;
    output ready;
  
  wire [7:0] a = ain;
  wire [7:0] b = bin;
  wire [7:0] am, bm;
  
  assign ready = 0;
  
      //GENERATE NEXT STATE CL
   	  mux2 m1(a, ain, reset, am);
  	  mux2 m2(b, bin, reset, bm);
      clogic c(am, bm, a, b);
      is_done i(a, b, ready);
      //COMPUTE PRODUCT CL 
      partial_product p(a, b, partial);
      adder16 add(partial, prod, sum);
    always @(posedge clk) begin
      assign prod = sum;
    end

    
endmodule

// Clock generation.  Period set via parameter:
//   clock changes every half_period ticks
//   full clock period = 2*half_period
// Replace half_period parameter with desired value
module clock_gen(clk);
    parameter half_period = 1; // REPLACE half_period HERE
    output clk;
    reg    clk;

    initial clk = 0;
    always #half_period clk = ~clk;
endmodule
